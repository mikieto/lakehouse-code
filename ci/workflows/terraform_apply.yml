# terraform_apply.yml

name: terraform_apply_template

on:
  workflow_call:
    inputs:
      bucket:         { type: string,  required: true }
      state_key:      { type: string,  required: true }
      lock_table:     { type: string,  required: true }
      workspace:      { type: string,  required: true }   # dev or prod
      prefix:         { type: string,  required: true }
      env_name:       { type: string,  required: true }
      aws_region:     { type: string,  default: "us-east-1" }
      extra_var:      { type: string,  default: "" }
      role_to_assume: { type: string,  required: true }

      run_smoke:       { type: boolean, default: true  }   # can be set to false for prod
      timeout_minutes: { type: number,  default: 35   }    # Exit #1: 30 min + 5 min buffer
    secrets:
      budget_email:   { required: true }

permissions:
  id-token: write
  contents: read

jobs:
  apply:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout_minutes }}
    concurrency: apply-${{ inputs.workspace }}
    environment: ${{ inputs.workspace }}
    env:
      TF_IN_AUTOMATION: "true"
      TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.x
          terraform_wrapper: false

      - uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-tf-${{ inputs.workspace }}-${{ hashFiles('infra/.terraform.lock.hcl') }}

      # AWS OIDC auth
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.role_to_assume }}
          aws-region:     ${{ inputs.aws_region }}

      # Terraform init / workspace
      - name: Terraform init
        run: |
          terraform -chdir=infra init \
            -backend-config="bucket=${{ inputs.bucket }}" \
            -backend-config="key=${{ inputs.state_key }}" \
            -backend-config="region=${{ inputs.aws_region }}" \
            -backend-config="dynamodb_table=${{ inputs.lock_table }}"

      - name: Select or create workspace
        run: terraform -chdir=infra workspace select ${{ inputs.workspace }} || terraform -chdir=infra workspace new ${{ inputs.workspace }}

      # plan
      - name: Terraform plan
        id: tfplan
        env:
          TF_VAR_prefix:       ${{ inputs.prefix }}
          TF_VAR_env:          ${{ inputs.env_name }}
          TF_VAR_budget_email: ${{ secrets.budget_email }}
        run: |
          EXTRA=""
          if [ -n "${{ inputs.extra_var }}" ]; then
            EXTRA="-var='${{ inputs.extra_var }}'"
          fi
          terraform -chdir=infra plan -input=false -out=tfplan $EXTRA

      # apply (skipped for pull_request)
      - name: Terraform apply
        if: github.event_name != 'pull_request'
        run: terraform -chdir=infra apply -auto-approve tfplan

      # Athena smoke test: runs only on dev workspace -----------------
      - name: Athena smoke
        if: github.event_name != 'pull_request' && inputs.run_smoke && inputs.workspace == 'dev'
        run: |
          set -euo pipefail

          # Get WorkGroup name and raw bucket from Terraform outputs
          WG=$(terraform -chdir=infra output -raw athena_workgroup_name)
          BUCKET=$(terraform -chdir=infra output -raw raw_bucket)

          # Start a lightweight query
          QID=$(aws athena start-query-execution \
                  --work-group "$WG" \
                  --query-string "SELECT 1;" \
                  --result-configuration "OutputLocation=s3://$BUCKET/athena/" \
                  --output text --query 'QueryExecutionId')

          # Poll until SUCCEEDED / FAILED (AWS CLI v1 has no “wait”)
          echo "Athena query id: $QID – waiting up to 40×15 s ..."
          for i in {1..40}; do
            STATE=$(aws athena get-query-execution \
                      --query-execution-id "$QID" \
                      --output text \
                      --query 'QueryExecution.Status.State')
            case "$STATE" in
              SUCCEEDED) echo "✅ SUCCEEDED"; exit 0 ;;
              FAILED|CANCELLED) echo "❌ $STATE"; exit 1 ;;
            esac
            sleep 15
          done
          echo "⏰ timeout"; exit 1

